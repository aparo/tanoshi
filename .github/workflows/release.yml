name: release

on:
  push:
    tags:
      - v[0-9]+.[0-9]+.[0-9]+

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
  build-linux:
    runs-on: ubuntu-latest
    needs: create-release
    steps:
      - uses: actions/checkout@v2
      - name: Install libarchive
        run: sudo apt update && sudo apt install -y libssl-dev libarchive-dev build-essential cmake llvm clang libicu-dev nettle-dev libacl1-dev liblzma-dev libzstd-dev liblz4-dev libbz2-dev zlib1g-dev libxml2-dev
      - name: Install wasm-pack
        run: cargo install wasm-bindgen-cli wasm-pack
      - name: Build Frontend
        run: cd $GITHUB_WORKSPACE/tanoshi-web && yarn install && yarn build
      - name: Build Backend
        run: cd /home/runner/work/tanoshi/tanoshi/tanoshi && cargo build -p tanoshi --release
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ${{ github.workspace }}/target/release/tanoshi
          asset_name: tanoshi-linux
          asset_content_type: application/octet-stream
  build-macos:
    runs-on: macos-latest
    needs: create-release
    steps:
      - uses: actions/checkout@v2
      - name: Install deps
        run: brew install icu4c libarchive bzip2 lz4 zlib expat
      - name: Install wasm-pack
        run: cargo install wasm-bindgen-cli wasm-pack
      - name: Build Frontend
        run: cd $GITHUB_WORKSPACE/tanoshi-web && yarn install && yarn build
      - name: Build Backend
        run: |
          export PKG_CONFIG_PATH="/usr/local/opt/icu4c/lib/pkgconfig:/usr/local/opt/libarchive/lib/pkgconfig:/usr/local/opt/zlib/lib/pkgconfig:/usr/local/opt/expat/lib/pkgconfig"
          cd $GITHUB_WORKSPACE/tanoshi && cargo build -p tanoshi --release
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ${{ github.workspace }}/target/release/tanoshi
          asset_name: tanoshi-macos
          asset_content_type: application/octet-stream
  build-windows:
    runs-on: windows-latest
    needs: create-release
    steps:
      - uses: actions/checkout@v2
      - name: Install LLVM and Clang
        uses: KyleMayes/install-llvm-action@v1
        with:
          version: "12.0"
      - name: Install wasm-pack
        run: cargo install wasm-bindgen-cli wasm-pack
      - name: Build Frontend
        run: cd $env:GITHUB_WORKSPACE/tanoshi-web && yarn install && yarn build
      - name: Install libarchive
        run: |
          vcpkg integrate install
          vcpkg install libarchive:x64-windows-static-md
      - name: Build Backend
        run: |
          $env:LIBCLANG_PATH="C:\Program Files\LLVM\bin"
          cd $env:GITHUB_WORKSPACE\tanoshi && cargo build -p tanoshi --release
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ${{ github.workspace }}\target\release\tanoshi.exe
          asset_name: tanoshi-win.exe
          asset_content_type: application/octet-stream
