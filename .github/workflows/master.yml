name: test

on:
  pull_request:
    paths:
      - crates/**
      - "!**/*.md"
      - "!.github/screenshots/**"
  push:
    branches: [master]
    paths:
      - .github/workflows/master.yml
      - Dockerfile
      - crates/**
      - "!**/*.md"
      - "!.github/screenshots/**"

jobs:
  build-docker:
    if: ${{ github.ref == 'refs/heads/master' }}
    runs-on: ubuntu-latest
    environment: default
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: faldez/tanoshi:master
          build-args: |
            BUILD_WEB=false
          cache-from: type=gha
          cache-to: type=gha,mode=max
  build-web:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install trunk
        run: |
          wget -qO- https://github.com/thedodd/trunk/releases/download/v0.13.1/trunk-x86_64-unknown-linux-gnu.tar.gz | tar -xzf- -C $HOME/.cargo/bin
          chmod +x $HOME/.cargo/bin/trunk
      - name: Install wasm32-unknown-unknown
        run: rustup target add wasm32-unknown-unknown
      - name: Build tanoshi-web
        run: cd crates/tanoshi-web && trunk build --release
      - name: Upload dist
        uses: actions/upload-artifact@v2
        with:
          name: dist
          path: crates/tanoshi-web/dist
  build-desktop:
    runs-on: ${{ matrix.os }}
    needs:
      - build-web
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
    steps:
      - uses: actions/checkout@v2
      - name: Download dist
        uses: actions/download-artifact@v2
        with:
          name: dist
          path: crates/tanoshi-web/dist
      - run: cargo install tauri-cli --version ^1.0.0-beta --locked
      - name: Install deps
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: sudo apt update && sudo apt upgrade -y && sudo apt install -y libssl-dev libarchive-dev build-essential cmake llvm clang libicu-dev nettle-dev libacl1-dev liblzma-dev libzstd-dev liblz4-dev libbz2-dev zlib1g-dev libxml2-dev lsb-release wget software-properties-common libwebkit2gtk-4.0-dev curl libgtk-3-dev libappindicator3-dev patchelf librsvg2-dev libpango1.0-dev
      - name: Install deps
        if: ${{ matrix.os == 'macos-latest' }}
        run: brew install icu4c libarchive bzip2 lz4 zlib expat llvm@11
      - name: Install LLVM and Clang
        if: ${{ matrix.os != 'macos-latest' }}
        uses: KyleMayes/install-llvm-action@v1
        with:
          version: 13.0
      - id: cache-vcpkg
        name: Cache vcpkg
        uses: actions/cache@v2
        if: ${{ matrix.os == 'windows-latest' }}
        with:
          path: "C:/vcpkg/installed"
          key: vcpkg-${{ matrix.os }}-
          restore-keys: |
            vcpkg-${{ matrix.os }}-
      - name: Install deps
        if: ${{ matrix.os == 'windows-latest' && steps.cache-vcpkg.outputs.cache-hit != 'true' }}
        run: |
          vcpkg integrate install
          vcpkg install --only-downloads libarchive:x64-windows-static-md
          vcpkg install libarchive:x64-windows-static-md
      - name: Build tanoshi
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: cargo tauri build
        working-directory: crates/tanoshi
        env:
          RUSTFLAGS: "-Clink-arg=-Wl,--allow-multiple-definition"
      - name: Build tanoshi
        if: ${{ matrix.os == 'macos-latest' }}
        run: cargo tauri build
        working-directory: crates/tanoshi
        env:
          PKG_CONFIG_PATH: /usr/local/opt/icu4c/lib/pkgconfig:/usr/local/opt/libarchive/lib/pkgconfig:/usr/local/opt/zlib/lib/pkgconfig:/usr/local/opt/expat/lib/pkgconfig
      - name: Build tanoshi
        if: ${{ matrix.os == 'windows-latest' }}
        run: cargo tauri build
        working-directory: crates/tanoshi
        env:
          LIBCLANG_PATH: ${{ env.LLVM_PATH }}/bin
      - name: Upload dist
        uses: actions/upload-artifact@v2
        if: ${{ matrix.os == 'ubuntu-latest' }}
        with:
          name: tanoshi-desktop
          path: |
            target/release/bundle/**/*.deb
            target/release/bundle/**/*.AppImage
            !target/release/bundle/**/linuxdeploy-x86_64.AppImage
      - name: Upload dist
        uses: actions/upload-artifact@v2
        if: ${{ matrix.os == 'macos-latest' }}
        with:
          name: tanoshi-desktop
          path: target/release/bundle/**/*.dmg
      - name: Upload dist
        uses: actions/upload-artifact@v2
        if: ${{ matrix.os == 'windows-latest' }}
        with:
          name: tanoshi-desktop
          path: target/release/bundle/**/*.msi
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
    steps:
      - uses: actions/checkout@v2
      - run: mkdir crates/tanoshi-web/dist
      - name: Install deps
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: sudo apt update && sudo apt upgrade -y && sudo apt install -y libssl-dev libarchive-dev build-essential cmake llvm clang libicu-dev nettle-dev libacl1-dev liblzma-dev libzstd-dev liblz4-dev libbz2-dev zlib1g-dev libxml2-dev lsb-release wget software-properties-common libwebkit2gtk-4.0-dev curl libgtk-3-dev libappindicator3-dev patchelf librsvg2-dev libpango1.0-dev
      - name: Install deps
        if: ${{ matrix.os == 'macos-latest' }}
        run: brew install icu4c libarchive bzip2 lz4 zlib expat llvm@11
      - name: Install LLVM and Clang
        if: ${{ matrix.os != 'macos-latest' }}
        uses: KyleMayes/install-llvm-action@v1
        with:
          version: 13.0
      - id: cache-vcpkg
        name: Cache vcpkg
        uses: actions/cache@v2
        if: ${{ matrix.os == 'windows-latest' }}
        with:
          path: "C:/vcpkg/installed"
          key: vcpkg-${{ matrix.os }}-
          restore-keys: |
            vcpkg-${{ matrix.os }}-
      - name: Install deps
        if: ${{ matrix.os == 'windows-latest' && steps.cache-vcpkg.outputs.cache-hit != 'true' }}
        run: |
          vcpkg integrate install
          vcpkg install --only-downloads libarchive:x64-windows-static-md
          vcpkg install libarchive:x64-windows-static-md
      - name: Test
        if: ${{ matrix.os == 'ubuntu-latest' }}
        uses: actions-rs/cargo@v1
        with:
          command: test
        env:
          RUSTFLAGS: "-Clink-arg=-Wl,--allow-multiple-definition"
      - name: Test
        if: ${{ matrix.os == 'macos-latest' }}
        uses: actions-rs/cargo@v1
        with:
          command: test
        env:
          PKG_CONFIG_PATH: /usr/local/opt/icu4c/lib/pkgconfig:/usr/local/opt/libarchive/lib/pkgconfig:/usr/local/opt/zlib/lib/pkgconfig:/usr/local/opt/expat/lib/pkgconfig
      - name: Test
        if: ${{ matrix.os == 'windows-latest' }}
        uses: actions-rs/cargo@v1
        with:
          command: test
        env:
          LIBCLANG_PATH: ${{ env.LLVM_PATH }}/bin
